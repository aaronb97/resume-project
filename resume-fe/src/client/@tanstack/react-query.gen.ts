// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options,
  postResumes,
  getResumesById,
  patchResumesById,
  getResumesByIdRecommendations,
  postResumesProcessRecommendations,
  get,
} from "../sdk.gen";
import {
  queryOptions,
  type UseMutationOptions,
  type DefaultError,
} from "@tanstack/react-query";
import type {
  PostResumesData,
  PostResumesResponse,
  GetResumesByIdData,
  PatchResumesByIdData,
  PatchResumesByIdResponse,
  GetResumesByIdRecommendationsData,
  PostResumesProcessRecommendationsData,
  PostResumesProcessRecommendationsResponse,
  GetData,
} from "../types.gen";
import { client as _heyApiClient } from "../client.gen";

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, "baseUrl" | "body" | "headers" | "path" | "query"> & {
    _id: string;
    _infinite?: boolean;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl,
  } as QueryKey<TOptions>[0];

  if (infinite) {
    params._infinite = infinite;
  }

  if (options?.body) {
    params.body = options.body;
  }

  if (options?.headers) {
    params.headers = options.headers;
  }

  if (options?.path) {
    params.path = options.path;
  }

  if (options?.query) {
    params.query = options.query;
  }

  return [params];
};

export const postResumesQueryKey = (options?: Options<PostResumesData>) =>
  createQueryKey("postResumes", options);

export const postResumesOptions = (options?: Options<PostResumesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postResumes({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });

      return data;
    },
    queryKey: postResumesQueryKey(options),
  });
};

export const postResumesMutation = (
  options?: Partial<Options<PostResumesData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PostResumesResponse,
    DefaultError,
    Options<PostResumesData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postResumes({
        ...options,
        ...localOptions,
        throwOnError: true,
      });

      return data;
    },
  };

  return mutationOptions;
};

export const getResumesByIdQueryKey = (options: Options<GetResumesByIdData>) =>
  createQueryKey("getResumesById", options);

export const getResumesByIdOptions = (options: Options<GetResumesByIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getResumesById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });

      return data;
    },
    queryKey: getResumesByIdQueryKey(options),
  });
};

export const patchResumesByIdMutation = (
  options?: Partial<Options<PatchResumesByIdData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PatchResumesByIdResponse,
    DefaultError,
    Options<PatchResumesByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await patchResumesById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });

      return data;
    },
  };

  return mutationOptions;
};

export const getResumesByIdRecommendationsQueryKey = (
  options: Options<GetResumesByIdRecommendationsData>,
) => createQueryKey("getResumesByIdRecommendations", options);

export const getResumesByIdRecommendationsOptions = (
  options: Options<GetResumesByIdRecommendationsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getResumesByIdRecommendations({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });

      return data;
    },
    queryKey: getResumesByIdRecommendationsQueryKey(options),
  });
};

export const postResumesProcessRecommendationsQueryKey = (
  options: Options<PostResumesProcessRecommendationsData>,
) => createQueryKey("postResumesProcessRecommendations", options);

export const postResumesProcessRecommendationsOptions = (
  options: Options<PostResumesProcessRecommendationsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postResumesProcessRecommendations({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });

      return data;
    },
    queryKey: postResumesProcessRecommendationsQueryKey(options),
  });
};

export const postResumesProcessRecommendationsMutation = (
  options?: Partial<Options<PostResumesProcessRecommendationsData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PostResumesProcessRecommendationsResponse,
    DefaultError,
    Options<PostResumesProcessRecommendationsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postResumesProcessRecommendations({
        ...options,
        ...localOptions,
        throwOnError: true,
      });

      return data;
    },
  };

  return mutationOptions;
};

export const getQueryKey = (options?: Options<GetData>) =>
  createQueryKey("get", options);

export const getOptions = (options?: Options<GetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await get({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });

      return data;
    },
    queryKey: getQueryKey(options),
  });
};
